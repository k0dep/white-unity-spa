<nav aria-label="...">
  <ul class="pagination justify-content-end">

    <li class=@PrevClass>
      <a class="page-link" onclick=@(() => OnChange(Page.Page-1))><span class="oi oi-arrow-left"></span></a>
    </li>

    @foreach (var index in GetPageRange())
    {
      var currentIndex = index; // closure
      var humanIndex = currentIndex + 1;
      var currentPageClass = "page-item" + (Page.Page == currentIndex ? " active" : "");

      <li class=@currentPageClass>
        <a class="page-link" onclick=@(() => OnChange(currentIndex))>@humanIndex</a>
      </li>
    }

    <li class=@NextClass>
      <a class="page-link" onclick=@(() => OnChange(Page.Page+1))><span class="oi oi-arrow-right"></span></a>
    </li>
  </ul>
</nav>

@functions {
  [Parameter] Action<int> OnChangePage { get; set; }
  [Parameter] PagingResultBaseDto Page { get; set; }

  string PrevClass { get; set; } = "page-item";
  string NextClass { get; set; } = "page-item";

  const int PageHalfRange = 5;
  int PagesCount => (Page.Count / Page.ItemsPerPage) + 1;

  IEnumerable<int> GetPageRange()
  {
    var min = Math.Max(0, Page.Page - PageHalfRange);
    var max = Math.Min(PagesCount, Page.Page + PageHalfRange + 1);
    return Enumerable.Range(min, max - min);
  }

  protected override void OnInit()
  {
    if(PagesCount <= (Page.Page + 2))
    {
      NextClass += " disabled";
    }

    if(Page.Page <= 0)
    {
      PrevClass += " disabled";
    }
  }

  private void OnChange(int page)
  {
    OnChangePage?.Invoke(page);
  }
}